generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id
  name                String
  email               String             @unique
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  stripeCustomerId    String?            @map("stripe_customer_id")
  isSubscribed        Boolean?           @default(false)
  subscriptionId      String? // ← peut être utile
  subscriptionEndDate DateTime? // ✅ ← ajoute ceci
  Purchase            Purchase[]
  accounts            Account[]
  sessions            Session[]
  SubscriptionData    SubscriptionData[]

  @@map("user")
}

model Session {
  userId    String
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  id        String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Purchase {
  id               String            @id @default(cuid())
  userId           String
  amount           Float
  status           String
  customerId       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  subscriptionId   String?
  userPurchaseData ProgramData?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionData SubscriptionData?
}

model SubscriptionData {
  id         String   @id @default(cuid())
  purchaseId String   @unique
  userId     String
  titlePlan  String
  startDate  DateTime
  endDate    DateTime
  status     String

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])
}

model ProgramData {
  id         String   @id @default(cuid())
  purchaseId String   @unique
  titlePlan  String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}
