datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
  GUEST
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  isTemporary            Boolean         @default(false)
  lastActive             DateTime?
  activationToken        String?
  activationTokenExpires DateTime?
  password               String?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  Authenticator          Authenticator[]
  Purchase               Purchase[]
  customerId             String?
  priceId                String?
  stripeCustomerId       String?
  subscriptionStartDate  DateTime?
  subscriptionEndDate    DateTime?
  isSubscribed           Boolean         @default(false)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  role                   Role            @default(USER)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Purchase {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount             Float
  status             String
  customerId         String
  subscriptionData   Json? // Champ JSON facultatif pour stocker les données
  subscriptionStatus String? // Statut facultatif de l'abonnement
  userPurchaseData   Json? // Champ JSON facultatif pour stocker les données de l'utilisateur
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
